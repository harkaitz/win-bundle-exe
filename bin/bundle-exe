#!/bin/sh -e
#L:
#L:  MIT License
#L:  
#l:  Bug reports, feature requests to gemini|https://harkadev.com/oss
#l:  Copyright (c) 2023 Harkaitz Agirre, harkaitz.aguirre@gmail.com
#L:
#L:  Permission is hereby granted, free of charge, to any person obtaining
#L:  a copy of this software and associated documentation files (the
#L:  "Software"), to deal in the Software without restriction, including
#L:  without limitation the rights to use, copy, modify, merge, publish,
#L:  distribute, sublicense, and/or sell copies of the Software, and to
#L:  permit persons to whom the Software is furnished to do so, subject to
#L:  the following conditions:
#L:
#L:  The above copyright notice and this permission notice shall be
#L:  included in all copies or substantial portions of the Software.
#L:
#L:  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
#L:  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
#L:  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
#L:  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
#L:  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
#L:  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
#L:  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
##:
#h: Usage: $0 [OPTS...] DIRECTORY PROGRAM [ARGS...]
#h:
#h: Create a single Microsoft Windows executable bundle (A single .exe
#h: file) out of a directory containing a program.
#h:
#h: The bundle will extract to a temporary directory, change working
#h: directory and execute PROGRAM inside the directory.
#h:
#h:     -V           : Show honored environment variables.
#h:     -v           : Verbose output.
#h:     -d           : Download SFX modules if needed.
#h:     -o NAME|FILE : Output the file here.
#h:     -t TITLE     : Title.
#h:     -p PROMPT    : Show a prompt that must be accepted.
#h:     -P           : Show extraction progress bar.
#h:     -i ICON      : Set icon image (can be any format).
##:
##: 7z SFX: https://sevenzip.osdn.jp/chm/cmdline/switches/sfx.htm
##: Resource Hacler: http://www.angusj.com/resourcehacker/
bundle_exe() {
    local pwd="`pwd`" t="`mktemp -u`" d='' o='' p='' a='' s=''
    local OPTIND optopt opt_d= opt_V= opt_t= opt_p= opt_P= opt_i=
    ## Parse command line arguments.
    while getopts "Vvdo:t:p:Pi:" optopt; do
        case $optopt in
            V)  bundle_exe_show_variables; return 0;;
            v)  local VERBOSE=y   ;;
            d)  opt_d=y           ;;
            o)  o="${OPTARG}"     ;;
            t)  opt_t="${OPTARG}" ;;
            p)  opt_p="${OPTARG}" ;;
            P)  opt_P=y           ;;
            i)  opt_i="${OPTARG}" ;;
            \?) return 1          ;;
        esac
    done
    shift $(( $OPTIND - 1 ))
    ## Check requirements and download SFX modules.
    bundle_exe_check_programs
    if test -f "${BUNDLE_AUX}/7zSD.sfx"; then
        true
    elif test -n "${opt_d}"; then
        local z="${t}-sfx.7z"
        verbose "D ${BUNDLE_SFX_URL} ..."
        curl -s -o "${z}" "${BUNDLE_SFX_URL}"
        verbose "X ${BUNDLE_AUX}/7zSD.sfx ..."
        7z e "${z}" -o"${BUNDLE_AUX}" bin/7zSD.sfx -y >/dev/null
        rm -f "${z}"
    else
        error "${BUNDLE_AUX}/7zSD.sfx: not found."
        error "You can download it with: bundle-exe -d"
        return 1
    fi
    if test -f "${BUNDLE_AUX}/ResourceHacker.exe"; then
        true
    elif test -n "${opt_d}"; then
        local z="${t}-rh.zip"
        verbose "D ${BUNDLE_RH_URL} ..."
        curl -s -o "${z}" "${BUNDLE_RH_URL}"
        verbose "X ${BUNDLE_AUX}/ResourceHacker.exe ..."
        7z e "${z}" -o"${BUNDLE_AUX}" ResourceHacker.exe -y >/dev/null
        rm -f "${z}"
    else
        error "${BUNDLE_AUX}/ResourceHacker.exe: not found."
        error "You can download it with: bundle-exe -d"
        return 1
    fi    
    ## Require a directory.
    if test -d "${1}"; then
        d="$1"; shift
    elif test -n "${1}"; then
        error "${1}: The directory does not exist."
        return 1
    else
        test -n "${opt_d}" || error "Please specify at least a directory."
        return 1
    fi
    ## Default output file.
    case "${o}" in
        '')
            mkdir -p "${BUNDLE_DIR}"
            o="${BUNDLE_DIR}/`basename "${d}"`.exe"
            ;;
        *.exe|*.EXE)
            true
            ;;
        *)
            o="${BUNDLE_DIR}/${o}.exe"
            ;;
    esac
    ## Search the first program if needed.
    if test -n "${1}"; then
        p="${1}"; shift
    else
        p="`find "${d}" -iregex '.*\.exe' -exec basename '{}' ';' | head -n 1`"
        if test ! -n "${p}"; then
            error "Didn't specify an executable."
            error "Can't find an executable in ${d}."
            return 1
        fi
    fi
    ## The rest are arguments.
    a="$*"
    ## Create configuration.
    verbose "Creating ${t}.txt ..."
    if true; then
        echo ";!@Install@!UTF-8!"
        if test -n "${opt_t}"; then
            echo "Title=\"${opt_t}\""
        fi
        if test -n "${opt_P}"; then
            echo "Progress=\"yes\""
        else
            echo "Progress=\"no\""
        fi
        if test -n "${opt_p}"; then
            echo "BeginPrompt=\"${opt_p}\""
        fi
        echo "ExecuteFile=\"${p}\""
        if test -n "${a}"; then
            echo "ExecuteParameters=\"${a}\""
        fi
        echo ";!@InstallEnd@!"
    fi > "${t}.txt"
    ## Create a zip.
    verbose "Creating ${t}.7z ..."
    cd "${d}"; 7z u "${t}.7z" . >/dev/null; cd "${pwd}"
    ## Add icon.
    if test -n "${opt_i}"; then
        local s="${t}.sfx"
        verbose "Creating ${t}.ico from ${opt_i} ..."
        magick "${opt_i}" -background none -resize 128x128 -density 128x128 "${t}.ico"
        verbose "Attaching icon to SFX module ..."
        wine "${BUNDLE_AUX}/ResourceHacker.exe" \
            -open "${BUNDLE_AUX}/7zSD.sfx"      \
            -save "${s}"                        \
            -action addskip                     \
            -res "${t}.ico"                     \
            -mask ICONGROUP,MAINICON,
    else
        local s="${BUNDLE_AUX}/7zSD.sfx"
    fi
    ## Concatenate all.
    verbose "Creating ${o} ..."
    cat "${s}" "${t}.txt" "${t}.7z" > "${o}"
    chmod +x "${o}"
}
bundle_exe_show_variables() {
    printf '%-20s : %s\n'                     \
           BUNDLE_DIR     "${BUNDLE_DIR}"     \
           BUNDLE_AUX     "${BUNDLE_AUX}"     \
           BUNDLE_SFX_URL "${BUNDLE_SFX_URL}" \
           BUNDLE_RH_URL  "${BUNDLE_RH_URL}"
}
bundle_exe_calc_variables() {
    BUNDLE_DIR="${BUNDLE_DIR:-${HOME}/.gettar}"
    BUNDLE_AUX="${BUNDLE_AUX:-${HOME}/.bundle}"
    BUNDLE_SFX_URL="${BUNDLE_SFX_URL:-https://www.7-zip.org/a/lzma2200.7z}"
    BUNDLE_RH_URL="${BUNDLE_RH_URL:-http://www.angusj.com/resourcehacker/resource_hacker.zip}"
}
bundle_exe_check_programs() {
    local ret='0'
    if ! which 7z >/dev/null 2>&1; then
        error "Command '7z' not found."; ret='1'
    fi
    if ! which curl >/dev/null 2>&1; then
        error "Command 'curl' not found."; ret='1'
    fi
    if ! which mktemp >/dev/null 2>&1; then
        error "Command 'mktemp' not found."; ret='1'
    fi
    if ! which wine >/dev/null 2>&1; then
        error "Command 'wine' not found."; ret='1'
    fi
    if ! which magick >/dev/null 2>&1; then
        error "Command 'convert' not found."; ret='1'
    fi
    return ${ret}
}

## -----------------------------------------------------------------------------

## -----------------------------------------------------------------------------
error()   { echo "${SCRNAME}: error: $*" >&2; }
verbose() { test ! -n "${VERBOSE}" || echo "${SCRNAME}: $*" >&2; }
bundle_exe_calc_variables
SCRNAME="`basename "$0"`"
if test @"${SCRNAME}" = @"bundle-exe";then
    case "${1}" in
        ''|-h|--help)
            sed -n 's/^ *#h: \{0,1\}//p' "$0" | sed "s|\\\$0|${SCRNAME}|g"
            echo ""
            sed -n 's/^ *#l: \{0,2\}//p' "$0"
            ;;
        *)
            bundle_exe "$@"
            ;;
    esac
fi
